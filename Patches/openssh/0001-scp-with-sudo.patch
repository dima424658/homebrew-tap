From 824bfa0e2ec56e46f01e3c44705a05e8248c4348 Mon Sep 17 00:00:00 2001
From: Dmitry Pankov <dk.pankov@vk.team>
Date: Thu, 11 Apr 2024 14:30:34 +0300
Subject: [PATCH] scp with sudo

---
 Makefile.in |   2 +-
 scp.c       | 507 ++++------------------------------------------------
 2 files changed, 39 insertions(+), 470 deletions(-)

diff --git a/Makefile.in b/Makefile.in
index 1efe11f..e27e2cd 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -135,7 +135,7 @@ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o \
 
 SFTP_CLIENT_OBJS=sftp-common.o sftp-client.o sftp-glob.o
 
-SCP_OBJS=	scp.o progressmeter.o $(SFTP_CLIENT_OBJS)
+SCP_OBJS=	scp.o progressmeter.o
 
 SSHADD_OBJS=	ssh-add.o $(SKOBJS)
 
diff --git a/scp.c b/scp.c
index 492dace..307f1d3 100644
--- a/scp.c
+++ b/scp.c
@@ -133,16 +133,12 @@
 #include "misc.h"
 #include "progressmeter.h"
 #include "utf8.h"
-#include "sftp.h"
-
-#include "sftp-common.h"
-#include "sftp-client.h"
 
 extern char *__progname;
 
 #define COPY_BUFLEN	16384
 
-int do_cmd(char *, char *, char *, int, int, char *, int *, int *, pid_t *);
+int do_cmd(char *, char *, char *, int, int, char *, int *, int *, pid_t *, const char*);
 int do_cmd2(char *, char *, int, char *, int, int);
 
 /* Struct for addargs */
@@ -173,22 +169,12 @@ int throughlocal = 1;
 int sshport = -1;
 
 /* This is the program to execute for the secured connection. ("ssh" or -S) */
-char *ssh_program = _PATH_SSH_PROGRAM;
+char *ssh_program = "/usr/bin/ssh";
 
 /* This is used to store the pid of ssh_program */
 pid_t do_cmd_pid = -1;
 pid_t do_cmd_pid2 = -1;
 
-/* SFTP copy parameters */
-size_t sftp_copy_buflen;
-size_t sftp_nrequests;
-
-/* Needed for sftp */
-volatile sig_atomic_t interrupted = 0;
-
-int sftp_glob(struct sftp_conn *, const char *, int,
-    int (*)(const char *, int), glob_t *); /* proto for sftp-glob.c */
-
 static void
 killchild(int signo)
 {
@@ -277,7 +263,7 @@ do_local_cmd(arglist *a)
 
 int
 do_cmd(char *program, char *host, char *remuser, int port, int subsystem,
-    char *cmd, int *fdin, int *fdout, pid_t *pid)
+    char *cmd, int *fdin, int *fdout, pid_t *pid, const char* remote_user)
 {
 #ifdef USE_PIPES
 	int pin[2], pout[2];
@@ -346,6 +332,9 @@ do_cmd(char *program, char *host, char *remuser, int port, int subsystem,
 			addargs(&args, "-s");
 		addargs(&args, "--");
 		addargs(&args, "%s", host);
+		addargs(&args, "%s", "sudo");
+		if(remote_user != NULL)
+			addargs(&args, "-u %s", remote_user);
 		addargs(&args, "%s", cmd);
 
 		execvp(program, args.list);
@@ -448,35 +437,23 @@ int Tflag, pflag, iamremote, iamrecursive, targetshouldbedirectory;
 #define	CMDNEEDS	64
 char cmd[CMDNEEDS];		/* must hold "rcp -r -p -d\0" */
 
-enum scp_mode_e {
-	MODE_SCP,
-	MODE_SFTP
-};
-
 int response(void);
 void rsource(char *, struct stat *);
 void sink(int, char *[], const char *);
 void source(int, char *[]);
-void tolocal(int, char *[], enum scp_mode_e, char *sftp_direct);
-void toremote(int, char *[], enum scp_mode_e, char *sftp_direct);
+void tolocal(int, char *[], const char*);
+void toremote(int, char *[], const char*);
 void usage(void);
 
-void source_sftp(int, char *, char *, struct sftp_conn *);
-void sink_sftp(int, char *, const char *, struct sftp_conn *);
-void throughlocal_sftp(struct sftp_conn *, struct sftp_conn *,
-    char *, char *);
-
 int
 main(int argc, char **argv)
 {
-	int ch, fflag, tflag, status, r, n;
+	int ch, fflag, tflag, status, n;
 	char **newargv, *argv0;
 	const char *errstr;
 	extern char *optarg;
 	extern int optind;
-	enum scp_mode_e mode = MODE_SFTP;
-	char *sftp_direct = NULL;
-	long long llv;
+	char *remote_user = NULL;
 
 	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
 	sanitise_stdfd();
@@ -506,7 +483,7 @@ main(int argc, char **argv)
 
 	fflag = Tflag = tflag = 0;
 	while ((ch = getopt(argc, argv,
-	    "12346ABCTdfOpqRrstvD:F:J:M:P:S:c:i:l:o:X:")) != -1) {
+	    "12346ABCTdfOpqRrstvF:J:M:P:S:c:i:l:o:u:")) != -1) {
 		switch (ch) {
 		/* User-visible flags. */
 		case '1':
@@ -522,8 +499,8 @@ main(int argc, char **argv)
 			addargs(&args, "-%c", ch);
 			addargs(&remote_remote_args, "-%c", ch);
 			break;
-		case 'D':
-			sftp_direct = optarg;
+		case 'u':
+			remote_user = optarg;
 			break;
 		case '3':
 			throughlocal = 1;
@@ -541,12 +518,6 @@ main(int argc, char **argv)
 			addargs(&args, "-%c", ch);
 			addargs(&args, "%s", optarg);
 			break;
-		case 'O':
-			mode = MODE_SCP;
-			break;
-		case 's':
-			mode = MODE_SFTP;
-			break;
 		case 'P':
 			sshport = a2port(optarg);
 			if (sshport <= 0)
@@ -587,32 +558,6 @@ main(int argc, char **argv)
 			addargs(&remote_remote_args, "-q");
 			showprogress = 0;
 			break;
-		case 'X':
-			/* Please keep in sync with sftp.c -X */
-			if (strncmp(optarg, "buffer=", 7) == 0) {
-				r = scan_scaled(optarg + 7, &llv);
-				if (r == 0 && (llv <= 0 || llv > 256 * 1024)) {
-					r = -1;
-					errno = EINVAL;
-				}
-				if (r == -1) {
-					fatal("Invalid buffer size \"%s\": %s",
-					     optarg + 7, strerror(errno));
-				}
-				sftp_copy_buflen = (size_t)llv;
-			} else if (strncmp(optarg, "nrequests=", 10) == 0) {
-				llv = strtonum(optarg + 10, 1, 256 * 1024,
-				    &errstr);
-				if (errstr != NULL) {
-					fatal("Invalid number of requests "
-					    "\"%s\": %s", optarg + 10, errstr);
-				}
-				sftp_nrequests = (size_t)llv;
-			} else {
-				fatal("Invalid -X option");
-			}
-			break;
-
 		/* Server options. */
 		case 'd':
 			targetshouldbedirectory = 1;
@@ -643,9 +588,6 @@ main(int argc, char **argv)
 	/* Do this last because we want the user to be able to override it */
 	addargs(&args, "-oForwardAgent=no");
 
-	if (iamremote)
-		mode = MODE_SCP;
-
 	if ((pwd = getpwuid(userid = getuid())) == NULL)
 		fatal("unknown user %u", (u_int) userid);
 
@@ -692,17 +634,17 @@ main(int argc, char **argv)
 	(void) ssh_signal(SIGPIPE, lostconn);
 
 	if (colon(argv[argc - 1]))	/* Dest is remote host. */
-		toremote(argc, argv, mode, sftp_direct);
+		toremote(argc, argv, remote_user);
 	else {
 		if (targetshouldbedirectory)
 			verifydir(argv[argc - 1]);
-		tolocal(argc, argv, mode, sftp_direct);	/* Dest is local host. */
+		tolocal(argc, argv, remote_user);	/* Dest is local host. */
 	}
 	/*
 	 * Finally check the exit status of the ssh process, if one was forked
 	 * and no error has occurred yet
 	 */
-	if (do_cmd_pid != -1 && (mode == MODE_SFTP || errs == 0)) {
+	if (do_cmd_pid != -1 && errs == 0) {
 		if (remin != -1)
 		    (void) close(remin);
 		if (remout != -1)
@@ -1012,36 +954,14 @@ brace_expand(const char *pattern, char ***patternsp, size_t *npatternsp)
 	return ret;
 }
 
-static struct sftp_conn *
-do_sftp_connect(char *host, char *user, int port, char *sftp_direct,
-   int *reminp, int *remoutp, int *pidp)
-{
-	if (sftp_direct == NULL) {
-		if (do_cmd(ssh_program, host, user, port, 1, "sftp",
-		    reminp, remoutp, pidp) < 0)
-			return NULL;
-
-	} else {
-		freeargs(&args);
-		addargs(&args, "sftp-server");
-		if (do_cmd(sftp_direct, host, NULL, -1, 0, "sftp",
-		    reminp, remoutp, pidp) < 0)
-			return NULL;
-	}
-	return sftp_init(*reminp, *remoutp,
-	    sftp_copy_buflen, sftp_nrequests, limit_kbps);
-}
-
 void
-toremote(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
+toremote(int argc, char **argv, const char* remote_user)
 {
 	char *suser = NULL, *host = NULL, *src = NULL;
 	char *bp, *tuser, *thost, *targ;
 	int sport = -1, tport = -1;
-	struct sftp_conn *conn = NULL, *conn2 = NULL;
 	arglist alist;
-	int i, r, status;
-	struct stat sb;
+	int i, r;
 	u_int j;
 
 	memset(&alist, '\0', sizeof(alist));
@@ -1082,63 +1002,21 @@ toremote(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
 			continue;
 		}
 		if (host && throughlocal) {	/* extended remote to remote */
-			if (mode == MODE_SFTP) {
-				if (remin == -1) {
-					/* Connect to dest now */
-					conn = do_sftp_connect(thost, tuser,
-					    tport, sftp_direct,
-					    &remin, &remout, &do_cmd_pid);
-					if (conn == NULL) {
-						fatal("Unable to open "
-						    "destination connection");
-					}
-					debug3_f("origin in %d out %d pid %ld",
-					    remin, remout, (long)do_cmd_pid);
-				}
-				/*
-				 * XXX remember suser/host/sport and only
-				 * reconnect if they change between arguments.
-				 * would save reconnections for cases like
-				 * scp -3 hosta:/foo hosta:/bar hostb:
-				 */
-				/* Connect to origin now */
-				conn2 = do_sftp_connect(host, suser,
-				    sport, sftp_direct,
-				    &remin2, &remout2, &do_cmd_pid2);
-				if (conn2 == NULL) {
-					fatal("Unable to open "
-					    "source connection");
-				}
-				debug3_f("destination in %d out %d pid %ld",
-				    remin2, remout2, (long)do_cmd_pid2);
-				throughlocal_sftp(conn2, conn, src, targ);
-				(void) close(remin2);
-				(void) close(remout2);
-				remin2 = remout2 = -1;
-				if (waitpid(do_cmd_pid2, &status, 0) == -1)
-					++errs;
-				else if (!WIFEXITED(status) ||
-				    WEXITSTATUS(status) != 0)
-					++errs;
-				do_cmd_pid2 = -1;
-				continue;
-			} else {
-				xasprintf(&bp, "%s -f %s%s", cmd,
-				    *src == '-' ? "-- " : "", src);
-				if (do_cmd(ssh_program, host, suser, sport, 0,
-				    bp, &remin, &remout, &do_cmd_pid) < 0)
-					exit(1);
-				free(bp);
-				xasprintf(&bp, "%s -t %s%s", cmd,
-				    *targ == '-' ? "-- " : "", targ);
-				if (do_cmd2(thost, tuser, tport, bp,
-				    remin, remout) < 0)
-					exit(1);
-				free(bp);
-				(void) close(remin);
-				(void) close(remout);
-				remin = remout = -1;
-			}
+			xasprintf(&bp, "%s -f %s%s", cmd,
+				*src == '-' ? "-- " : "", src);
+			if (do_cmd(ssh_program, host, suser, sport, 0,
+				bp, &remin, &remout, &do_cmd_pid, remote_user) < 0)
+				exit(1);
+			free(bp);
+			xasprintf(&bp, "%s -t %s%s", cmd,
+				*targ == '-' ? "-- " : "", targ);
+			if (do_cmd2(thost, tuser, tport, bp,
+				remin, remout) < 0)
+				exit(1);
+			free(bp);
+			(void) close(remin);
+			(void) close(remout);
+			remin = remout = -1;
 		} else if (host) {	/* standard remote to remote */
 			/*
 			 * Second remote user is passed to first remote side
@@ -1183,33 +1061,12 @@ toremote(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
 			if (do_local_cmd(&alist) != 0)
 				errs = 1;
 		} else {	/* local to remote */
-			if (mode == MODE_SFTP) {
-				/* no need to glob: already done by shell */
-				if (stat(argv[i], &sb) != 0) {
-					fatal("stat local \"%s\": %s", argv[i],
-					    strerror(errno));
-				}
-				if (remin == -1) {
-					/* Connect to remote now */
-					conn = do_sftp_connect(thost, tuser,
-					    tport, sftp_direct,
-					    &remin, &remout, &do_cmd_pid);
-					if (conn == NULL) {
-						fatal("Unable to open sftp "
-						    "connection");
-					}
-				}
-
-				/* The protocol */
-				source_sftp(1, argv[i], targ, conn);
-				continue;
-			}
 			/* SCP */
 			if (remin == -1) {
 				xasprintf(&bp, "%s -t %s%s", cmd,
 				    *targ == '-' ? "-- " : "", targ);
 				if (do_cmd(ssh_program, thost, tuser, tport, 0,
-				    bp, &remin, &remout, &do_cmd_pid) < 0)
+				    bp, &remin, &remout, &do_cmd_pid, remote_user) < 0)
 					exit(1);
 				if (response() < 0)
 					exit(1);
@@ -1219,8 +1076,6 @@ toremote(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
 		}
 	}
 out:
-	if (mode == MODE_SFTP)
-		free(conn);
 	free(tuser);
 	free(thost);
 	free(targ);
@@ -1230,11 +1085,10 @@ out:
 }
 
 void
-tolocal(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
+tolocal(int argc, char **argv, const char* remote_user)
 {
 	char *bp, *host = NULL, *src = NULL, *suser = NULL;
 	arglist alist;
-	struct sftp_conn *conn = NULL;
 	int i, r, sport = -1;
 
 	memset(&alist, '\0', sizeof(alist));
@@ -1271,29 +1125,11 @@ tolocal(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
 			continue;
 		}
 		/* Remote to local. */
-		if (mode == MODE_SFTP) {
-			conn = do_sftp_connect(host, suser, sport,
-			    sftp_direct, &remin, &remout, &do_cmd_pid);
-			if (conn == NULL) {
-				error("sftp connection failed");
-				++errs;
-				continue;
-			}
-
-			/* The protocol */
-			sink_sftp(1, argv[argc - 1], src, conn);
-
-			free(conn);
-			(void) close(remin);
-			(void) close(remout);
-			remin = remout = -1;
-			continue;
-		}
 		/* SCP */
 		xasprintf(&bp, "%s -f %s%s",
 		    cmd, *src == '-' ? "-- " : "", src);
 		if (do_cmd(ssh_program, host, suser, sport, 0, bp,
-		    &remin, &remout, &do_cmd_pid) < 0) {
+		    &remin, &remout, &do_cmd_pid, remote_user) < 0) {
 			free(bp);
 			++errs;
 			continue;
@@ -1308,82 +1144,6 @@ tolocal(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)
 	free(src);
 }
 
-/* Prepare remote path, handling ~ by assuming cwd is the homedir */
-static char *
-prepare_remote_path(struct sftp_conn *conn, const char *path)
-{
-	size_t nslash;
-
-	/* Handle ~ prefixed paths */
-	if (*path == '\0' || strcmp(path, "~") == 0)
-		return xstrdup(".");
-	if (*path != '~')
-		return xstrdup(path);
-	if (strncmp(path, "~/", 2) == 0) {
-		if ((nslash = strspn(path + 2, "/")) == strlen(path + 2))
-			return xstrdup(".");
-		return xstrdup(path + 2 + nslash);
-	}
-	if (sftp_can_expand_path(conn))
-		return sftp_expand_path(conn, path);
-	/* No protocol extension */
-	error("server expand-path extension is required "
-	    "for ~user paths in SFTP mode");
-	return NULL;
-}
-
-void
-source_sftp(int argc, char *src, char *targ, struct sftp_conn *conn)
-{
-	char *target = NULL, *filename = NULL, *abs_dst = NULL;
-	int src_is_dir, target_is_dir;
-	Attrib a;
-	struct stat st;
-
-	memset(&a, '\0', sizeof(a));
-	if (stat(src, &st) != 0)
-		fatal("stat local \"%s\": %s", src, strerror(errno));
-	src_is_dir = S_ISDIR(st.st_mode);
-	if ((filename = basename(src)) == NULL)
-		fatal("basename \"%s\": %s", src, strerror(errno));
-
-	/*
-	 * No need to glob here - the local shell already took care of
-	 * the expansions
-	 */
-	if ((target = prepare_remote_path(conn, targ)) == NULL)
-		cleanup_exit(255);
-	target_is_dir = sftp_remote_is_dir(conn, target);
-	if (targetshouldbedirectory && !target_is_dir) {
-		debug("target directory \"%s\" does not exist", target);
-		a.flags = SSH2_FILEXFER_ATTR_PERMISSIONS;
-		a.perm = st.st_mode | 0700; /* ensure writable */
-		if (sftp_mkdir(conn, target, &a, 1) != 0)
-			cleanup_exit(255); /* error already logged */
-		target_is_dir = 1;
-	}
-	if (target_is_dir)
-		abs_dst = sftp_path_append(target, filename);
-	else {
-		abs_dst = target;
-		target = NULL;
-	}
-	debug3_f("copying local %s to remote %s", src, abs_dst);
-
-	if (src_is_dir && iamrecursive) {
-		if (sftp_upload_dir(conn, src, abs_dst, pflag,
-		    SFTP_PROGRESS_ONLY, 0, 0, 1, 1) != 0) {
-			error("failed to upload directory %s to %s", src, targ);
-			errs = 1;
-		}
-	} else if (sftp_upload(conn, src, abs_dst, pflag, 0, 0, 1) != 0) {
-		error("failed to upload file %s to %s", src, targ);
-		errs = 1;
-	}
-
-	free(abs_dst);
-	free(target);
-}
 
 void
 source(int argc, char **argv)
@@ -1546,109 +1306,6 @@ rsource(char *name, struct stat *statp)
 	(void) response();
 }
 
-void
-sink_sftp(int argc, char *dst, const char *src, struct sftp_conn *conn)
-{
-	char *abs_src = NULL;
-	char *abs_dst = NULL;
-	glob_t g;
-	char *filename, *tmp = NULL;
-	int i, r, err = 0, dst_is_dir;
-	struct stat st;
-
-	memset(&g, 0, sizeof(g));
-
-	/*
-	 * Here, we need remote glob as SFTP can not depend on remote shell
-	 * expansions
-	 */
-	if ((abs_src = prepare_remote_path(conn, src)) == NULL) {
-		err = -1;
-		goto out;
-	}
-
-	debug3_f("copying remote %s to local %s", abs_src, dst);
-	if ((r = sftp_glob(conn, abs_src, GLOB_NOCHECK|GLOB_MARK,
-	    NULL, &g)) != 0) {
-		if (r == GLOB_NOSPACE)
-			error("%s: too many glob matches", src);
-		else
-			error("%s: %s", src, strerror(ENOENT));
-		err = -1;
-		goto out;
-	}
-
-	/* Did we actually get any matches back from the glob? */
-	if (g.gl_matchc == 0 && g.gl_pathc == 1 && g.gl_pathv[0] != 0) {
-		/*
-		 * If nothing matched but a path returned, then it's probably
-		 * a GLOB_NOCHECK result. Check whether the unglobbed path
-		 * exists so we can give a nice error message early.
-		 */
-		if (sftp_stat(conn, g.gl_pathv[0], 1, NULL) != 0) {
-			error("%s: %s", src, strerror(ENOENT));
-			err = -1;
-			goto out;
-		}
-	}
-
-	if ((r = stat(dst, &st)) != 0)
-		debug2_f("stat local \"%s\": %s", dst, strerror(errno));
-	dst_is_dir = r == 0 && S_ISDIR(st.st_mode);
-
-	if (g.gl_matchc > 1 && !dst_is_dir) {
-		if (r == 0) {
-			error("Multiple files match pattern, but destination "
-			    "\"%s\" is not a directory", dst);
-			err = -1;
-			goto out;
-		}
-		debug2_f("creating destination \"%s\"", dst);
-		if (mkdir(dst, 0777) != 0) {
-			error("local mkdir \"%s\": %s", dst, strerror(errno));
-			err = -1;
-			goto out;
-		}
-		dst_is_dir = 1;
-	}
-
-	for (i = 0; g.gl_pathv[i] && !interrupted; i++) {
-		tmp = xstrdup(g.gl_pathv[i]);
-		if ((filename = basename(tmp)) == NULL) {
-			error("basename %s: %s", tmp, strerror(errno));
-			err = -1;
-			goto out;
-		}
-
-		if (dst_is_dir)
-			abs_dst = sftp_path_append(dst, filename);
-		else
-			abs_dst = xstrdup(dst);
-
-		debug("Fetching %s to %s\n", g.gl_pathv[i], abs_dst);
-		if (sftp_globpath_is_dir(g.gl_pathv[i]) && iamrecursive) {
-			if (sftp_download_dir(conn, g.gl_pathv[i], abs_dst,
-			    NULL, pflag, SFTP_PROGRESS_ONLY, 0, 0, 1, 1) == -1)
-				err = -1;
-		} else {
-			if (sftp_download(conn, g.gl_pathv[i], abs_dst, NULL,
-			    pflag, 0, 0, 1) == -1)
-				err = -1;
-		}
-		free(abs_dst);
-		abs_dst = NULL;
-		free(tmp);
-		tmp = NULL;
-	}
-
-out:
-	free(abs_src);
-	free(tmp);
-	globfree(&g);
-	if (err == -1)
-		errs = 1;
-}
-
 
 #define TYPE_OVERFLOW(type, val) \
 	((sizeof(type) == 4 && (val) > INT32_MAX) || \
@@ -1984,94 +1641,6 @@ screwup:
 	exit(1);
 }
 
-void
-throughlocal_sftp(struct sftp_conn *from, struct sftp_conn *to,
-    char *src, char *targ)
-{
-	char *target = NULL, *filename = NULL, *abs_dst = NULL;
-	char *abs_src = NULL, *tmp = NULL;
-	glob_t g;
-	int i, r, targetisdir, err = 0;
-
-	if ((filename = basename(src)) == NULL)
-		fatal("basename %s: %s", src, strerror(errno));
-
-	if ((abs_src = prepare_remote_path(from, src)) == NULL ||
-	    (target = prepare_remote_path(to, targ)) == NULL)
-		cleanup_exit(255);
-	memset(&g, 0, sizeof(g));
-
-	targetisdir = sftp_remote_is_dir(to, target);
-	if (!targetisdir && targetshouldbedirectory) {
-		error("%s: destination is not a directory", targ);
-		err = -1;
-		goto out;
-	}
-
-	debug3_f("copying remote %s to remote %s", abs_src, target);
-	if ((r = sftp_glob(from, abs_src, GLOB_NOCHECK|GLOB_MARK,
-	    NULL, &g)) != 0) {
-		if (r == GLOB_NOSPACE)
-			error("%s: too many glob matches", src);
-		else
-			error("%s: %s", src, strerror(ENOENT));
-		err = -1;
-		goto out;
-	}
-
-	/* Did we actually get any matches back from the glob? */
-	if (g.gl_matchc == 0 && g.gl_pathc == 1 && g.gl_pathv[0] != 0) {
-		/*
-		 * If nothing matched but a path returned, then it's probably
-		 * a GLOB_NOCHECK result. Check whether the unglobbed path
-		 * exists so we can give a nice error message early.
-		 */
-		if (sftp_stat(from, g.gl_pathv[0], 1, NULL) != 0) {
-			error("%s: %s", src, strerror(ENOENT));
-			err = -1;
-			goto out;
-		}
-	}
-
-	for (i = 0; g.gl_pathv[i] && !interrupted; i++) {
-		tmp = xstrdup(g.gl_pathv[i]);
-		if ((filename = basename(tmp)) == NULL) {
-			error("basename %s: %s", tmp, strerror(errno));
-			err = -1;
-			goto out;
-		}
-
-		if (targetisdir)
-			abs_dst = sftp_path_append(target, filename);
-		else
-			abs_dst = xstrdup(target);
-
-		debug("Fetching %s to %s\n", g.gl_pathv[i], abs_dst);
-		if (sftp_globpath_is_dir(g.gl_pathv[i]) && iamrecursive) {
-			if (sftp_crossload_dir(from, to, g.gl_pathv[i], abs_dst,
-			    NULL, pflag, SFTP_PROGRESS_ONLY, 1) == -1)
-				err = -1;
-		} else {
-			if (sftp_crossload(from, to, g.gl_pathv[i], abs_dst,
-			    NULL, pflag) == -1)
-				err = -1;
-		}
-		free(abs_dst);
-		abs_dst = NULL;
-		free(tmp);
-		tmp = NULL;
-	}
-
-out:
-	free(abs_src);
-	free(abs_dst);
-	free(target);
-	free(tmp);
-	globfree(&g);
-	if (err == -1)
-		errs = 1;
-}
-
 int
 response(void)
 {
@@ -2114,9 +1683,9 @@ void
 usage(void)
 {
 	(void) fprintf(stderr,
-	    "usage: scp [-346ABCOpqRrsTv] [-c cipher] [-D sftp_server_path] [-F ssh_config]\n"
+	    "usage: suscp [-346ABCOpqRrsTv] [-c cipher] [-F ssh_config]\n"
 	    "           [-i identity_file] [-J destination] [-l limit] [-o ssh_option]\n"
-	    "           [-P port] [-S program] [-X sftp_option] source ... target\n");
+	    "           [-P port] [-S program] [-u remote sudo user] source ... target\n");
 	exit(1);
 }
 
-- 
2.44.0

